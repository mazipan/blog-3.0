---
import { cva } from 'class-variance-authority';

import type { HTMLAttributes } from 'astro/types';
import type { VariantProps } from 'class-variance-authority';

const buttonVariants = cva('button', {
  variants: {
    variant: {
      outline: 'button-outline',
      solid: 'button-solid',
      ghost: 'button-ghost',
    },
    colors: {
      primary: 'button-primary',
      default: 'button-default',
    },
    size: { sm: 'button-sm', md: 'button-md' },
    disabled: { true: 'button-disabled' },
  },
  compoundVariants: [
    { variant: 'outline', colors: 'primary', class: 'button-outline-primary' },
    { variant: 'outline', colors: 'default', class: 'button-outline-default' },
    { variant: 'solid', colors: 'primary', class: 'button-solid-primary' },
    { variant: 'solid', colors: 'default', class: 'button-solid-default' },
    { variant: 'ghost', colors: 'primary', class: 'button-ghost-primary' },
    { variant: 'ghost', colors: 'default', class: 'button-ghost-default' },
  ],
});

export interface Props extends HTMLAttributes<'a'>, VariantProps<typeof buttonVariants> {
  element?: 'a' | 'button' | 'span';
}

const {
  class: className,
  variant = 'outline',
  colors = 'default',
  size = 'md',
  disabled,
  element = 'a',
  ...props
} = Astro.props;

const Element = disabled ? 'span' : element;
---

<Element {...props} class={buttonVariants({ variant, colors, size, disabled, className })}>
  <slot name="before-icon" />
  <slot />
  <slot name="after-icon" />
</Element>
