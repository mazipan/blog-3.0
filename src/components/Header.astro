---
import { Icon } from 'astro-icon/components';

import HeaderLink from '@/components/HeaderLink.astro';
import ThemeToggle from '@/components/ThemeToggle.astro';
import { SELECTORS } from '@/constants/dom';
import { NAVIGATION_ITEMS } from '@/constants/navigation';
import { ROUTES } from '@/constants/routes';
import { getActiveNavItemPath } from '@/utils/navigation';
import { cn } from '@/utils/styles';
import Button from './Button.astro';

const { SCROLL_TO_TOP_ID } = SELECTORS;

const { pathname: routePathname } = Astro.url;
const activeNavItemPath = getActiveNavItemPath(routePathname);
---

<header
  id={SCROLL_TO_TOP_ID}
  data-menu="close"
  class="group fixed top-2 z-50 w-full px-4 py-2 lg:px-0"
>
  <div
    class={cn(
      'relative flex gap-2',
      'md:!flex-row md:items-center md:justify-between',
      'max-w-6xl px-4 py-2 md:mx-auto',
      'rounded-2xl border border-yellow-400',
      'bg-background/95 supports-[backdrop-filter]:bg-background/60 backdrop-blur'
    )}
  >
    {/* mobile nav */}
    <div class="flex w-full items-center justify-between md:w-auto">
      <HeaderLink
        href={ROUTES.HOME}
        class="flex flex-row items-center gap-2 rounded-lg px-2 py-1 font-serif text-xl hover:bg-yellow-100 hover:text-yellow-600 focus:bg-yellow-100 focus:text-yellow-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 xs:text-2xl"
      >
        <span> MZP </span>
      </HeaderLink>

      <mobile-button class="flex items-center gap-2 md:hidden">
        <ThemeToggle />
        <Button
          id="menu-toggle"
          variant="ghost"
          colors="primary"
          size="sm"
          element="button"
          type="button"
          aria-expanded="false"
          aria-haspopup="menu"
          aria-label="Open main menu"
          class="group rounded p-1"
        >
          <Icon name="tabler:menu-3" class="h-6 w-6 group-aria-expanded:hidden" />
          <Icon name="tabler:menu-deep" class="hidden h-6 w-6 group-aria-expanded:block" />
        </Button>
      </mobile-button>
    </div>

    {/* Desktop nav items */}
    <nav class="mt-0 hidden select-none md:block" aria-label="Site navigation">
      <ul class="flex gap-2 md:!flex-row md:items-center">
        {
          NAVIGATION_ITEMS.map(({ title, path }) => (
            <li class="relative">
              <HeaderLink
                href={path}
                isActive={path === activeNavItemPath}
                class="rounded-lg px-2 py-1 hover:bg-yellow-100 hover:text-yellow-600 focus:bg-yellow-100 focus:text-yellow-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
              >
                {title}
              </HeaderLink>
            </li>
          ))
        }
        <li class="shrink-0">
          <ThemeToggle />
        </li>
      </ul>
    </nav>
  </div>
</header>

<aside class="group relative md:hidden" data-menu="close" id="menu-mobile">
  {/* Mobile nav items */}
  <nav
    class="fixed right-4 top-16 z-20 mt-0 min-w-[200px] transform select-none rounded-lg border border-gray-100 bg-base-100 p-2 shadow-xl transition-all duration-500 group-[[data-menu=open]]:mt-2 group-[[data-menu=close]]:translate-x-[110%] group-[[data-menu=open]]:translate-x-0 md:hidden"
    aria-label="Site navigation"
  >
    <ul class="flex flex-col gap-2">
      {
        NAVIGATION_ITEMS.map(({ title, path }) => (
          <li class="relative">
            <HeaderLink
              href={path}
              isActive={path === activeNavItemPath}
              class="block w-full rounded p-2 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:ring-offset-2 dark:hover:bg-base-200"
            >
              {title}
            </HeaderLink>
          </li>
        ))
      }
    </ul>
  </nav>
</aside>

<script>
  class MobileNavBtn extends HTMLElement {
    private headerEl: HTMLElement;
    private mobileNav: HTMLElement;
    private menuOpen: boolean;
    private mobileButtonEl: HTMLButtonElement;

    toggleMobileMenu = () => {
      // SCROLL_TO_TOP_ID
      let prevState = this.mobileNav.getAttribute('data-menu');
      let nextState = prevState === 'open' ? 'close' : 'open';

      this.mobileNav.setAttribute('data-menu', nextState);
      this.headerEl.setAttribute('data-menu', nextState);

      this.menuOpen = !this.menuOpen;
      this.mobileButtonEl.setAttribute('aria-expanded', this.menuOpen.toString());
    };

    constructor() {
      super();
      this.headerEl = document.getElementById('main-header')!;
      this.mobileNav = document.getElementById('menu-mobile')!;
      this.mobileButtonEl = this.querySelector('#menu-toggle') as HTMLButtonElement;
      this.menuOpen = false;

      this.mobileButtonEl.addEventListener('click', this.toggleMobileMenu);
    }
  }

  customElements.define('mobile-button', MobileNavBtn);
</script>
