---
import { Image } from 'astro:assets';
import { render } from 'astro:content';

import { getAllPostsWithReadingTime } from '@/modules/post/common';
import { getRandomPosts } from '@/modules/post/random';
import { getHeadingsForTableOfContents } from '@/modules/post/table-of-contents';
import { default as PostLayout } from '@/layouts/Post.astro';
import Giscus from '@/components/Giscus.astro';
import PostListMore from '@/components/PostListMore.astro';
import PostMeta from '@/components/PostMeta.astro';
import Share from '@/components/Share.astro';
import TagList from '@/components/TagList.astro';
import ToC from '@/components/ToC.astro';
import { DRAFT_TEXT } from '@/constants/data';
import { IMAGE_SIZES } from '@/constants/image';
import { ROUTES } from '@/constants/routes';
import { setTransitionSlug, TRANSITION_ELEMENT_IDS } from '@/constants/transitions';
import { CONFIG_CLIENT } from '@/config/client';
import { getOpenGraphImagePath } from '@/libs/api/open-graph/image-path';

import type { Metadata } from '@/types/common';
import type { Post } from '@/types/post';

const { SITE_URL, AUTHOR_NAME, AUTHOR_EMAIL, AUTHOR_LINKEDIN, AUTHOR_TWITTER, AUTHOR_YOUTUBE } =
  CONFIG_CLIENT;

export async function getStaticPaths() {
  const posts: Post[] = await getAllPostsWithReadingTime();

  const paths = posts.map((post) => {
    const { slug } = post;
    const randomPosts = getRandomPosts({ posts, excludeSlug: slug });

    return {
      params: { slug },
      props: { ...post, randomPosts },
    };
  });

  return paths;
}

const { data, readingTime, randomPosts } = Astro.props;
const {
  draft,
  title,
  publishDate,
  updatedDate,
  description,
  toc,
  heroImage,
  heroAlt,
  noHero,
  category,
  tags = [],
} = data;

const { url, params } = Astro;
const { slug } = params;
const { pathname } = url;

const { Content, headings: postHeadings } = await render(Astro.props);

const headings = getHeadingsForTableOfContents(postHeadings);

const postMetaProps = {
  category,
  publishDate,
  readingTime,
  updatedDate,
};

const shareProps = {
  title,
  description,
  url: `${SITE_URL}${ROUTES.BLOG}/${slug}`,
};

const getTransitionNameFromElementId = setTransitionSlug({ pageSlug: slug });

// handle all metadata here
const image = getOpenGraphImagePath(pathname);

const metadata: Metadata = { title, description, image };

const fullImageUrl = new URL(image, url);
const schema = JSON.stringify({
  '@context': 'https://schema.org',
  '@type': 'NewsArticle',
  headline: title,
  image: [fullImageUrl],
  datePublished: publishDate,
  dateModified: updatedDate || publishDate,
  author: [
    {
      '@type': 'Person',
      name: AUTHOR_NAME,
      url: SITE_URL + ROUTES.ABOUT,
      email: AUTHOR_EMAIL,
      sameAs: [AUTHOR_LINKEDIN, AUTHOR_TWITTER, AUTHOR_YOUTUBE],
    },
  ],
});
---

<PostLayout {metadata}>
  {
    toc && (
      <Fragment slot="toc">
        <ToC headings={headings} />
      </Fragment>
    )
  }

  <Fragment slot="hero-image">
    {/* hero image 1280x720 max, 16:9 */}
    {
      !noHero && (
        <Image
          {...IMAGE_SIZES.RESPONSIVE.MDX_EXPAND_LG}
          src={heroImage}
          alt={heroAlt}
          fetchpriority="high"
          loading="eager"
          itemprop="image"
          class="mt-4 block aspect-[16/8] h-auto max-h-[400px] w-full rounded-lg object-cover object-center"
          transition:name={getTransitionNameFromElementId({
            elementId: TRANSITION_ELEMENT_IDS.POST_CARD.HERO_IMAGE,
          })}
        />
      )
    }
  </Fragment>

  <Fragment slot="hero-text">
    <h1
      class="b-h1 mb-3 mt-0 tracking-wide"
      transition:name={getTransitionNameFromElementId({
        elementId: TRANSITION_ELEMENT_IDS.POST_CARD.TITLE,
      })}
    >
      {title}
      {draft && <sup class="ml-1 text-red-500">{DRAFT_TEXT}</sup>}
    </h1>

    {
      description && (
        <p
          class="mb-6 text-lg font-normal text-captions md:mb-8 md:text-xl"
          transition:name={getTransitionNameFromElementId({
            elementId: TRANSITION_ELEMENT_IDS.POST_CARD.DESCRIPTION,
          })}
        >
          {description}
        </p>
      )
    }

    <PostMeta
      {...postMetaProps}
      transition:name={getTransitionNameFromElementId({
        elementId: TRANSITION_ELEMENT_IDS.POST_CARD.META,
      })}
    />
  </Fragment>

  <Fragment slot="content">
    <Content />
  </Fragment>

  <Fragment slot="after-content">
    <div class="b-h2-mb mt-4 flex flex-col items-start gap-6 md:flex-row md:items-center">
      <TagList tags={tags} size="md" />
      <Share {...shareProps} />
    </div>

    <Giscus class="b-h2-mt" />
  </Fragment>

  <Fragment slot="more-posts">
    <PostListMore morePosts={randomPosts} />
  </Fragment>
</PostLayout>
<script type="application/ld+json" set:html={schema} />
