---
import { Image } from 'astro:assets';
import { render } from 'astro:content';

import { getAllProjects } from '@/modules/project';
import Centered from '@/layouts/Centered.astro';
import Breadcrumbs from '@/components/Breadcrumbs.astro';
import Share from '@/components/Share.astro';
import { BreadcrumbItemHome, BreadcrumbItemProject } from '@/constants/breadcrumb';
import { IMAGE_SIZES } from '@/constants/image';
import { ROUTES } from '@/constants/routes';
import { setTransitionSlug, TRANSITION_ELEMENT_IDS } from '@/constants/transitions';
import { CONFIG_CLIENT } from '@/config/client';
import { getOpenGraphImagePath } from '@/libs/api/open-graph/image-path';

import type { Metadata } from '@/types/common';
import type { Project } from '@/types/project';

const { SITE_URL } = CONFIG_CLIENT;

export async function getStaticPaths() {
  const sortedProjects: Project[] = await getAllProjects();

  const paths = sortedProjects.map((project) => ({
    params: { slug: project.slug },
    props: { ...project },
  }));

  return paths;
}

const { data } = Astro.props;
const { pathname } = Astro.url;
const { slug } = Astro.params;

const { Content } = await render(Astro.props);

const image = getOpenGraphImagePath(pathname);
const { title, description, heroImage, heroAlt } = data;

const metadata: Metadata = { title, description, image };

const shareProps = {
  title,
  description,
  url: `${SITE_URL}${ROUTES.PROJECTS}/${slug}`,
};
const getTransitionNameFromElementId = setTransitionSlug({ pageSlug: slug });
const breadcrumbs = [BreadcrumbItemHome, BreadcrumbItemProject];
---

<Centered {metadata}>
  <article class="my-prose relative [&_h2]:!my-0 [&_img]:!my-0 [&_li]:!my-0">
    <Breadcrumbs items={breadcrumbs} />
    <h1
      class="b-h1 mb-2 font-serif"
      transition:name={getTransitionNameFromElementId({
        elementId: TRANSITION_ELEMENT_IDS.POST_CARD.TITLE,
      })}
    >
      {title}
    </h1>
    {
      description && (
        <p
          class="my-4 text-xl font-normal text-content"
          transition:name={getTransitionNameFromElementId({
            elementId: TRANSITION_ELEMENT_IDS.POST_CARD.DESCRIPTION,
          })}
        >
          {description}
        </p>
      )
    }
    {
      heroImage && (
        <Image
          {...IMAGE_SIZES.RESPONSIVE.POST_HERO}
          src={heroImage}
          alt={heroAlt}
          fetchpriority="high"
          loading="eager"
          itemprop="image"
          class="block rounded-2xl"
          transition:name={getTransitionNameFromElementId({
            elementId: TRANSITION_ELEMENT_IDS.POST_CARD.HERO_IMAGE,
          })}
        />
      )
    }
    <Content />
    <div class="mt-8">
      <Share {...shareProps} />
    </div>
  </article>
</Centered>
