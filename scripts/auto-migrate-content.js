import {
  createReadStream,
  existsSync,
  lstatSync,
  readdirSync,
  readFileSync,
  unlinkSync,
  writeFileSync,
} from 'node:fs';
import { join, resolve } from 'node:path';

const REGEX_ENV_VERSION = /NEXT_PUBLIC_SEMANTIC_VERSION="(.*)"/g;

async function updateEnvVersion(envFilePath, nextVersion) {
  const readerStream = createReadStream(envFilePath, {
    encoding: 'utf-8',
  });
  let content = '';
  readerStream
    .on('data', (chunk) => {
      content += chunk;
    })
    .on('end', () => {
      const isContainsVersion = REGEX_ENV_VERSION.test(content);

      let newEnvContent = content;
      if (isContainsVersion) {
        newEnvContent = content.replace(
          REGEX_ENV_VERSION,
          `NEXT_PUBLIC_SEMANTIC_VERSION="${nextVersion}"`
        );
      } else {
        newEnvContent += `
    # NEXT_PUBLIC_SEMANTIC_VERSION was generated by bumpVersion script
    # Do not edit directly
    # RUN command: "yarn bump-version" instead
    NEXT_PUBLIC_SEMANTIC_VERSION="${nextVersion}"

    ${content}`;
      }

      try {
        writeFileSync(envFilePath, newEnvContent);
      } catch (error) {
        console.error(`Error writing env ${envFilePath} file: `, error);
      }
    });
}

const DRAFT_DIR = resolve('./src/draft');
const POST_DIR = resolve('./src/content/post');

const REGEX_TAGS_2 = /NEXT_PUBLIC_SEMANTIC_VERSION="(.*)"/g;
const REGEX_HERO_IMAGE_2 = /heroImage2: \/thumbnail\/(.*)/gi;
async function migrate() {
  const drafts = readdirSync(DRAFT_DIR);

  drafts.forEach((draftItem) => {
    const itemPath = join(DRAFT_DIR, draftItem);
    const isDir = lstatSync(itemPath).isDirectory();
    if (isDir) {
      const indexMd = join(itemPath, 'index.md');
      const fileContent = readFileSync(indexMd, { encoding: 'utf-8' });
      let newContent = fileContent;

      const match = fileContent.match(REGEX_HERO_IMAGE_2);
      if (match.length > 0) {
        const imagePath = match[0].replace('heroImage2: /thumbnail/', '');

        // Replace heroImage path
        newContent = newContent.replace(
          'poor-man-feature-flag/pexels-cottonbro-studio-5870547.jpg',
          imagePath
        );
        newContent = newContent.replace(REGEX_HERO_IMAGE_2, '');
      }
      try {
        const targetPath = join(POST_DIR, `${itemPath}.mdx`);
        writeFileSync(targetPath, fileContent);
        // Remove old md
        unlinkSync(indexMd);
      } catch (error) {
        console.error(`Error writing new file: `, error);
      }

      const enDirPath = join(DRAFT_DIR, draftItem, 'en');
      if (existsSync(enDirPath)) {
        const indexEnMd = join(enDirPath, 'index.md');
        const fileEnContent = readFileSync(indexEnMd, { encoding: 'utf-8' });

        try {
          const targetEnPath = join(DRAFT_DIR, `${itemPath}.mdx.bak`);
          writeFileSync(targetEnPath, fileEnContent);
          // Remove old md
          unlinkSync(indexEnMd);
        } catch (error) {
          console.error(`Error writing new file: `, error);
        }
      }
    }
  });
}

(async () => {
  await migrate();
})();
