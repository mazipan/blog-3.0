---
import { Icon } from 'astro-icon/components';

import { cva } from 'class-variance-authority';

import { cn } from '@/utils/styles';

import type { HTMLAttributes } from 'astro/types';
import type { VariantProps } from 'class-variance-authority';

const linkVariants = cva('button-default', {
  variants: {
    variant: {
      outline: 'button-outline',
    },
    size: {},
    disabled: { true: 'button-disabled' },
  },
  // compoundVariants: [],
});

export interface Props extends HTMLAttributes<'a'>, VariantProps<typeof linkVariants> {}

const { class: className, variant = 'outline', size, disabled, ...props } = Astro.props;
const { slots } = Astro;

const Element = disabled ? 'span' : 'a';

const beforeIconHtml = await slots.render('before-icon');
const afterIconHtml = await slots.render('after-icon');
---

<Element {...props} class={linkVariants({ variant, size, disabled, className })}>
  {
    beforeIconHtml && (
      <span class="inline-block">
        <Fragment set:html={beforeIconHtml} />
      </span>
    )
  }
  <span class="inline-block">
    <slot />
  </span>
  {
    afterIconHtml && (
      <span class="inline-block">
        <Fragment set:html={afterIconHtml} />
      </span>
    )
  }
</Element>
