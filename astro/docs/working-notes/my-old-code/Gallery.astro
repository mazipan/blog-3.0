---
import { Image } from 'astro:assets';

import ReactGallery from '@/components/react/Gallery';
import { IMAGE_SIZES } from '@/constants/image';
import { cn } from '@/utils/styles';

import type { AstroImageProps, ImageProps } from '@/types/common';
import type { ImageMetadata } from 'astro';

export interface Props extends astroHTML.JSX.HTMLAttributes {}

// filenames
const EXCLUDE_IMAGES = ['avatar1.jpg'];

const getAllImagesMetadata = (): ImageMetadata[] => {
  const imageModules = import.meta.glob<{ default: ImageMetadata }>(
    // cant be even variable
    '/src/assets/images/all-images/*.jpg',
    { eager: true }
  );

  // convert map to array
  const imagesMetadata = Object.keys(imageModules)
    // filter excluded filenames
    .filter((path) => !EXCLUDE_IMAGES.some((excludedFileName) => path.endsWith(excludedFileName)))
    // return metadata array
    .map((path) => imageModules[path].default);
  return imagesMetadata;
};

const imagesMetadata = getAllImagesMetadata();

const imageMetadataToAstroImageProps = (imagesMetadata: ImageMetadata): AstroImageProps => ({
  src: imagesMetadata,
  ...IMAGE_SIZES.FIXED.MDX_XXS_16_9,
  alt: 'Gallery image',
});

const astroImagePropsToReactImageProps = (astroImageProps: AstroImageProps): ImageProps => {
  // console.log('astroImageProps', JSON.stringify(astroImageProps, null, 2));

  const astroImageSrc = astroImageProps.src as ImageMetadata;

  return {
    src: astroImageSrc.src,
    originalSrc: astroImageSrc.src,
    width: parseInt(String(astroImageProps.width)),
    height: parseInt(String(astroImageProps.height)),
  };
};

const astroImages = imagesMetadata.map((metadata) => imageMetadataToAstroImageProps(metadata));
const reactImages = astroImages.map((astroProps) => astroImagePropsToReactImageProps(astroProps));

console.log('images', JSON.stringify(reactImages, null, 2));

const { class: className } = Astro.props;
---

<div class={cn('', className)}>
  <ReactGallery
    client:only="react"
    images={reactImages}
    thumbnailImageComponent={(<Image {...IMAGE_SIZES.FIXED.MDX_XXS_16_9} src="" alt="default" />)}
  />
</div>
{
  /*

/@fs/home/username/Desktop/nemanjam.github.io/src/assets/images/all-images/cyco5.jpg?origWidth=4608&origHeight=2592&origFormat=jpg

<ul class={cn('grid gap-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-3', className)}>
  {
    imagesMetadata.map((image) => (
      <li>
        <Image {...IMAGE_SIZES.FIXED.MDX_XXS_16_9} src={image} alt="my image" />
      </li>
    ))
  }
</ul>

interface Image {
    key?: Key;
    src: string;
    width: number;
    height: number;
    nano?: string;
    alt?: string;
    tags?: ImageTag[];
    isSelected?: boolean;
    caption?: ReactNode;
    customOverlay?: ReactNode;
    thumbnailCaption?: ReactNode;
    orientation?: number;
}
*/
}
