---
import {
  FacebookShareButton,
  HackerNewsShareButton,
  LinkedInShareButton,
  RedditShareButton,
  SocialShare,
  TwitterShareButton,
} from 'astro-social-share';

import { cva } from 'class-variance-authority';

import { DEFAULT_METADATA } from '@/constants/metadata';
import { CONFIG } from '@/config';

import type { ComponentProps } from 'astro/types';
import type { VariantProps } from 'class-variance-authority';

const shareVariants = cva('', {
  variants: {
    size: { sm: 'share-sm', md: 'share-md' },
  },
});

type SocialShareProps = Omit<ComponentProps<typeof SocialShare>, 'buttons'>;
export interface Props extends SocialShareProps, VariantProps<typeof shareVariants> {
  class?: string;
}
const { size = 'md', class: className, ...shareProps } = Astro.props;

const { title, description } = DEFAULT_METADATA;
const { SITE_URL } = CONFIG;

// via is only for twitter
const defaultProps = { description, title, via: SITE_URL };

// dont change order because of colors
const buttons = [
  TwitterShareButton,
  FacebookShareButton,
  RedditShareButton,
  LinkedInShareButton,
  HackerNewsShareButton,
];

const props = { ...defaultProps, ...shareProps };

// todo: change package
---

<div class={shareVariants({ size, className })}>
  {/* doesnt expose class, junk lib */}
  <SocialShare {...props} {buttons} />
</div>

{/* his slot is broken */}
<style is:global slot="astro-social-share-css">
  .astro-social-share {
    @apply inline-block;
  }

  .social-share-btn {
    @apply inline-block !mr-0;

    &:hover {
      filter: brightness(70%);
    }
  }

  /* size variants */
  .share-md {
    .astro-social-share {
      @apply h-10 space-x-8;
    }

    .social-share-btn svg {
      @apply inline-block w-10 h-10;
    }
  }

  .share-sm {
    .astro-social-share {
      @apply h-6 space-x-6 !my-4;
    }
    .social-share-btn svg {
      @apply inline-block w-6 h-6;
    }
  }

  /* twitter */
  .social-share-btn:nth-child(1) {
    fill: #000000;

    /* must target path */
    &:hover path {
      @apply fill-gray-400;
    }
  }

  /* facebook */
  .social-share-btn:nth-child(2) {
    fill: #1877f2;
  }

  /* reddit */
  .social-share-btn:nth-child(3) {
    fill: #ff4500;
  }

  /* linkedin */
  .social-share-btn:nth-child(4) {
    fill: #0a66c2;
  }

  /* hackernews */
  .social-share-btn:nth-child(5) {
    fill: #f0652f;
  }
</style>
